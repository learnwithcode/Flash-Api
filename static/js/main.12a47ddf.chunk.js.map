{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","mobile","first_name","employee_id","billing_amount","services","onClick","data","_this","headers","Content-Type","undefined","Token","axios","post","then","response","console","log","catch","err","react_default","a","createElement","type","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAwFeA,6MAlFbC,MAAQ,CACNC,OAAQ,aACNC,WAAa,QACbC,YAAc,OACdC,eAAiB,OACjBC,SAAW,cAGfC,QAAU,WACN,IAAMC,EAAO,CACXN,OAAQO,EAAKR,MAAMC,OACnBC,WAAaM,EAAKR,MAAME,WACxBC,YAAcK,EAAKR,MAAMG,YACzBC,eAAiBI,EAAKJ,eACtBC,SAAWG,EAAKR,MAAMK,UAGlBI,EAAU,CACdC,oBAAgBC,EAChBC,MAHY,uCAOdC,IAAMC,KAAK,4CAA6CP,EAAM,CAACE,QAAQA,IACtEM,KAAK,SAAAC,GACJC,QAAQC,IAAIF,KAEbG,MAAM,SAAAC,GACLH,QAAQC,IAAIE,8EAKhB,OACEC,EAAAC,EAAAC,cAAA,WAuCAF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,UAAU,kBAAkBnB,QAASoB,KAAKpB,SAAhE,kBA1EYqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.12a47ddf.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\n\nclass App extends React.Component {\n  state = {\n    mobile: '9898989898',\n      first_name : 'naman',\n      employee_id : '6767',\n      billing_amount : '7676',\n      services : 'trimming',\n  }\n\n  onClick = () => {\n      const data = {\n        mobile :this.state.mobile,\n        first_name : this.state.first_name,\n        employee_id : this.state.employee_id,\n        billing_amount : this.billing_amount,\n        services : this.state.services\n      }\n      const token = \"Rkx7@a5FHl-L#6Fb9CzF2L-jNz7epF4mEtC\"\n      const headers = {\n        \"Content-Type\": undefined,\n        \"Token\": token,\n        \n        \n      }\n      axios.post('http://127.0.0.1:8000/extension/flash-api', data, {headers:headers})\n      .then(response => {\n        console.log(response)\n      })\n      .catch(err => {\n        console.log(err)\n      });\n  }\n\n  render () {\n    return (\n      <div>\n        {/* <div className=\"form-group\">\n          <label htmlFor=\"mobile\">Mobile</label>\n          <input type=\"text\" name='mobile' className=\"form-control\" id=\"mobile\" aria-describedby=\"emailHelp\" placeholder=\"Enter Mobile\"\n          value={this.state.mobile}\n          onChange={e => this.setState({mobile : e.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"first_name\">First Name</label>\n          <input\n          value={this.state.first_name} \n          onChange={e => this.setState({first_name : e.target.value})}\n          type=\"text\" name='first_name' className=\"form-control\" id=\"first_name\" placeholder=\"Enter First Name\"/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"employee_id\">Employee Id</label>\n          <input\n          value={this.state.employee_id} \n          onChange={e => this.setState({employee_id : e.target.value})}\n          type=\"text\" name='employee_id' className=\"form-control\" id=\"employee_id\" placeholder=\"Enter Employee Id\"/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"billing_amount\">Billing Amount</label>\n          <input\n          value={this.state.billing_amount} \n          onChange={e => this.setState({billing_amount : e.target.value})}\n          type=\"text\" name='billing_amount' className=\"form-control\" id=\"billing_amount\" placeholder=\"Enter Billing Amount\"/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"services\">Services</label>\n          <input\n          value={this.state.services} \n          onChange={e => this.setState({services : e.target.value})}\n          type=\"text\" name='services' className=\"form-control\" id=\"services\" placeholder=\"Enter Services\"/>\n        </div> */}\n      <button type=\"submit\" className=\"btn btn-primary\" onClick={this.onClick}>Submit</button>\n\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}